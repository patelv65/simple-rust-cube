window.SIDEBAR_ITEMS = {"constant":[["FACES","Each inner array represents the indices of the vertices of a face of a cube in 3D space.  For example, the first inner array [1, 5, 7, 3] represents the vertices with indices 1, 5, 7, and 3 in a list of vertices."],["OFFSET_X","The OFFSET_X and OFFSET_Y constants are of type f32 and represent the horizontal and vertical offsets of the screen from the origin in pixels."],["OFFSET_Y",""],["SCALE_X","The SCALE_X and SCALE_Y constants are also of type f32 and represent the horizontal and vertical scaling factors for the screen.  These factors are used to stretch or shrink the screen along the x and y axes"],["SCALE_Y",""],["SCREEN_HEIGHT",""],["SCREEN_WIDTH","The SCREEN_WIDTH and SCREEN_HEIGHT constants are of type usize and represent the width and height of the screen "],["VERTICES","These are the vertices of a cube. Each vertex is represented as a Vector struct,  which contains an array of four f32 values. The first three values represent the x, y,  and z coordinates of the vertex in 3D space, and the fourth value is a homogeneous coordinate.  The vertices are defined in local space, meaning that they represent the positions of the points relative to the center of the cube."]],"fn":[["cull","the function cull takes three parameters: p0, p1, and p2, which are arrays of two f32 values. The function returns a boolean value. indicating whether the triangle formed by the three points is clockwise or counterclockwise."],["draw_line","This function is drawing a line on a 2D grid represented by the frame array. The line is drawn by setting the value of certain cells in the array to the ASCII values for a vertical bar (|) or a horizontal dash (-)."],["main","this is setting up a loop that will run indefinitely and create a series of frames for animation. the cube_to_world matrix is a 4x4 matrix that to be used to rotate an object around the origin in 3D."],["matrix_times_vector","This function, matrix_times_vector, calculates the product of a matrix and a vector. The function starts by destructuring the matrix and vector into their individual components.  The matrix is destructured into 4 [f32; 4] arrays, and the vector is destructured into an array of 4 f32 values. The function then calculates the product of the matrix and the vector by taking the weighted sum of the columns of the matrix."]],"struct":[["Matrix","This code defines a new struct called Matrix that consists of a fixed-size array of 4 arrays of 4 f32 values.  The #[derive(Debug, Clone, Copy)] line is called an attribute. it tells the Rust compiler to automatically implement the Debug, Clone, and Copy traits for the Matrix struct."],["Vector","This code defines a new struct called Vector that consists of a fixed-size array of 4 f32 values."]]};